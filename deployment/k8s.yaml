# Copyright (c) Spectro Cloud
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Namespace
metadata:
  name: hello-universe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-reader
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hello-universe-role
  namespace: hello-universe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-reader-binding
subjects:
  - kind: ServiceAccount
    name: hello-universe-role
    namespace: hello-universe
roleRef:
  kind: ClusterRole
  name: service-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: hello-universe
spec:
  selector:
    app: ui
  ports:
    - protocol: TCP
      name: ui
      port: 80
      targetPort: 8080
    - protocol: TCP
      name: api
      port: 3000
      targetPort: 3000
  type: LoadBalancer
---
apiVersion: v1
kind: Secret
metadata:
  name: db-password
  namespace: hello-universe
type: Opaque
data:
  db-password: <REPLACE_ME> # Replace with your own base64 encoded secret
---
apiVersion: v1
kind: Secret
metadata:
  name: auth-token
  namespace: hello-universe
type: Opaque
data:
  auth-token: <REPLACE_ME> # Replace with your own base64 encoded secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: hello-universe
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: ghcr.io/spectrocloud/hello-universe-db:1.1.0
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "500Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: hello-universe
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: hello-universe
spec:
  selector:
    matchLabels:
      app: api
  replicas: 1
  template:
    metadata:
      labels:
        app: api
    spec:
      serviceAccountName: hello-universe-role
      containers:
        - name: api
          image: ghcr.io/spectrocloud/hello-universe-api:1.1.0
          ports:
            - containerPort: 3000
              name: api
          env:
            - name: db-password
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db-password
            - name: DB_HOST
              value: "postgres.hello-universe.svc.cluster.local"
            - name: PORT
              value: "3000"
            - name: DB_USER
              value: "postgres"
            - name: DB_NAME
              value: "counter"
            - name: DB_ENCRYPTION
              value: "disable"
            - name: DB_INIT
              value: "false"
            - name: AUTHORIZATION
              value: "true"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: 3000
            initialDelaySeconds: 35
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: hello-universe
spec:
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP # If you want to expose the API service, change this value to LoadBalancer. See below for an example.
  # type: Loadbalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  namespace: hello-universe
spec:
  selector:
    matchLabels:
      app: ui
  replicas: 1
  template:
    metadata:
      labels:
        app: ui
    spec:
      serviceAccountName: hello-universe-role
      initContainers:
        - name: init-container
          image: busybox
          command:
            ["/bin/sh", "-c", "echo 'sleeping for 30 seconds' && sleep 30"]
      containers:
        - name: ui
          image: ghcr.io/spectrocloud/hello-universe:1.1.2-proxy
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: ui
          env:
            - name: TOKEN
              valueFrom:
                secretKeyRef:
                  name: auth-token
                  key: auth-token
            - name: API_URI
              # Leave empty and set QUERY_K8S_API to true to leverage a single loadbalancer.
              # Otherwise, set to the API service's URL and set QUERY_K8S_API to false
              value: ""
            - name: SVC_URI
              value: "api.hello-universe.svc.cluster.local:3000"
            - name: API_VERSION
              value: "1"
            - name: QUERY_K8S_API
              value: "true"
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 40
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 35
            periodSeconds: 3
